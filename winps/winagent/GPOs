
Write-Host "Auditing..." *>&1
function Check-GPO {
    param(
            [Parameter(Mandatory, HelpMessage = 'Enter the directory to get GPO infomation')]
            [ValidateNotNull()]
            [ValidateNotNullOrEmpty()]
            [String] $InPath,

            [Parameter(Mandatory, HelpMessage = 'Enter the directory to get GPO infomation')]
            [ValidateNotNull()]
            [ValidateNotNullOrEmpty()]
            [String] $DestPath,

            [Parameter(Mandatory, HelpMessage = 'Enter the directory to export the report')]
            [ValidateNotNull()]
            [ValidateNotNullOrEmpty()]
            [String] $OutPath
         )

    function Get-GPOInfo
    {
        param(
                [Parameter(Mandatory, HelpMessage = 'Enter the directory to dump the GPO')]
                [ValidateNotNull()]
                [ValidateNotNullOrEmpty()]
                [String] $OutPath
            )

        function Get-IniContent ()
        {
            param(
                    [Parameter(Mandatory)]
                    [ValidateNotNullOrEmpty()]
                    [String] $FilePath
                )
            $ini = @{}
            switch -regex -file $FilePath
            {
                "^\[(.+)\]" # Section
                {
                    $section = $matches[1]
                    $ini[$section] = @{}
                    $CommentCount = 0
                }
                "^(;.*)$" # Comment
                {
                    $value = $matches[1]
                    $CommentCount = $CommentCount + 1
                    $name = "Comment" + $CommentCount
                    $ini[$section][$name] = $value
                }
                "(.+?)\s*=(.*)" # Key
                {
                    $name,$value = $matches[1..2]
                    $ini[$section][$name] = $value
                }
            }
            return $ini
        }
        
        Set-Variable -Name dict_sid -Option ReadOnly -Value @{
            "*S-1-0" = "Null Authority"
            "*S-1-0-0" = "No One"
            "*S-1-1" = "World Authority"
            "*S-1-1-0" = "Everyone"
            "*S-1-2" = "Local Authority"
            "*S-1-2-0" = "Local"
            "*S-1-3" = "Creator Authority"
            "*S-1-3-0" = "Creator Owner"
            "*S-1-3-1" = "Creator Group"
            "*S-1-3-4" = "Owner Rights"
            "*S-1-4" = "Non-unique Authority"
            "*S-1-5" = "NT Authority"
            "*S-1-5-1" = "Dialup"
            "*S-1-5-2" = "Network"
            "*S-1-5-3" = "Batch"
            "*S-1-5-4" = "Interactive"
            "*S-1-5-5-" = "Logon Session"
            "*S-1-5-6" = "Service"
            "*S-1-5-7" = "Anonymous"
            "*S-1-5-9" = "Enterprise Domain Controllers"
            "*S-1-5-10" = "Principal Self"
            "*S-1-5-11" = "Authenticated Users"
            "*S-1-5-12" = "Restricted Code"
            "*S-1-5-13" = "Terminal Server Users"
            "*S-1-5-14" = "Remote Interactive Logon"
            "*S-1-5-17" = "This Organization"
            "*S-1-5-18" = "Local System"
            "*S-1-5-19" = "Local Service"
            "*S-1-5-20" = "Network Service"
            "*S-1-5-32-544" = "Administrators"
            "*S-1-5-32-545" = "Users"
            "*S-1-5-32-546" = "Guests"
            "*S-1-5-32-547" = "Power Users"
            "*S-1-5-32-548" = "Account Operators"
            "*S-1-5-32-549" = "Server Operators"
            "*S-1-5-32-550" = "Print Operators"
            "*S-1-5-32-551" = "Backup Operators"
            "*S-1-5-32-552" = "Replicators"
            "*S-1-5-32-554" = "Builtin\Pre-Windows 2000 Compatible Access"
            "*S-1-5-32-555" = "Builtin\Remote Desktop Users"
            "*S-1-5-32-556" = "Builtin\Network Configuration Operators"
            "*S-1-5-32-557" = "Builtin\Incoming Forest Trust Builders"
            "*S-1-5-32-558" = "Builtin\Performance Monitor Users"
            "*S-1-5-32-559" = "Builtin\Performance Log Users"
            "*S-1-5-32-560" = "Builtin\Windows Authorization Access Group"
            "*S-1-5-32-561" = "Builtin\Terminal Server License Servers"
            "*S-1-5-32-562" = "Builtin\Distributed COM Users"
            "*S-1-5-32-582" = "Storage Replica Administrators"
            "*S-1-5-80" = "NT Service"
            "*S-1-5-80-0" = "All Services"
            "*S-1-5-90-0" = "Windows Manager\Windows Manager Group"
        }
        Set-Variable -Name dict_ura_name -Option ReadOnly -Value @{
            "SeTrustedCredManAccessPrivilege" = "Access Credential Manager as a trusted caller"
            "SeNetworkLogonRight" = "Access this computer from the network"
            "SeTcbPrivilege" = "Act as part of the operating system"
            "SeMachineAccountPrivilege" = "Add workstations to domain"
            "SeIncreaseQuotaPrivilege" = "Adjust memory quotas for a process"
            "SeInteractiveLogonRight" = "Allow log on locally"
            "SeRemoteInteractiveLogonRight" = "Allow log on through Remote Desktop Services"
            "SeBackupPrivilege" = "Back up files and directories"
            "SeChangeNotifyPrivilege" = "Bypass traverse checking"
            "SeSystemtimePrivilege" = "Change the system time"
            "SeTimeZonePrivilege" = "Change the time zone"
            "SeCreatePagefilePrivilege" = "Create a pagefile"
            "SeCreateTokenPrivilege" = "Create a token object"
            "SeCreateGlobalPrivilege" = "Create global objects"
            "SeCreatePermanentPrivilege" = "Create permanent shared objects"
            "SeCreateSymbolicLinkPrivilege" = "Create symbolic links"
            "SeDebugPrivilege" = "Debug programs"
            "SeDenyNetworkLogonRight" = "Deny access to this computer from the network"
            "SeDenyBatchLogonRight" = "Deny log on as a batch job"
            "SeDenyServiceLogonRight" = "Deny log on as a service"
            "SeDenyInteractiveLogonRight" = "Deny log on locally"
            "SeDenyRemoteInteractiveLogonRight" = "Deny log on through Remote Desktop Services"
            "SeEnableDelegationPrivilege" = "Enable computer and user accounts to be trusted for delegation"
            "SeRemoteShutdownPrivilege" = "Force shutdown from a remote system"
            "SeAuditPrivilege" = "Generate security audits"
            "SeImpersonatePrivilege" = "Impersonate a client after authentication"
            "SeIncreaseWorkingSetPrivilege" = "Increase a process working set"
            "SeIncreaseBasePriorityPrivilege" = "Increase scheduling priority"
            "SeLoadDriverPrivilege" = "Load and unload device drivers"
            "SeLockMemoryPrivilege" = "Lock pages in memory"
            "SeBatchLogonRight" = "Log on as a batch job"
            "SeServiceLogonRight" = "Log on as a service"
            "SeSecurityPrivilege" = "Manage auditing and security log"
            "SeRelabelPrivilege" = "Modify an object label"
            "SeSystemEnvironmentPrivilege" = "Modify firmware environment values"
            "SeManageVolumePrivilege" = "Perform volume maintenance tasks"
            "SeProfileSingleProcessPrivilege" = "Profile single process"
            "SeSystemProfilePrivilege" = "Profile system performance"
            "SeUndockPrivilege" = "Remove computer from docking station"
            "SeAssignPrimaryTokenPrivilege" = "Replace a process level token"
            "SeRestorePrivilege" = "Restore files and directories"
            "SeShutdownPrivilege" = "Shut down the system"
            "SeSyncAgentPrivilege" = "Synchronize directory service data"
            "SeTakeOwnershipPrivilege" = "Take ownership of files or other objects"
        }
        Set-Variable -Name dict_regname -Option ReadOnly -Value @{
            "@wsecedit.dll,-59004" = "Audit: Shut down system immediately if unable to log security audits"
            "@wsecedit.dll,-59104" = "Audit: Force audit policy subcategory settings (Windows Vista or later) to override audit policy category settings"
            "@wsecedit.dll,-59005" = "Devices: Prevent users from installing printer drivers"
            "@wsecedit.dll,-59099" = "Devices: Allowed to format and eject removable media"
            "@wsecedit.dll,-59011" = "Domain controller: Allow server operators to schedule tasks"
            "@wsecedit.dll,-59012" = "Domain controller: Refuse machine account password changes"
            "@wsecedit.dll,-59013" = "Domain controller: LDAP server signing requirements"
            "@wsecedit.dll,-59016" = "Domain member: Disable machine account password changes"
            "@wsecedit.dll,-59017" = "Domain member: Maximum machine account password age"
            "@wsecedit.dll,-59018" = "Domain member: Digitally encrypt or sign secure channel data (always)"
            "@wsecedit.dll,-59019" = "Domain member: Digitally encrypt secure channel data (when possible)"
            "@wsecedit.dll,-59020" = "Domain member: Digitally sign secure channel data (when possible)"
            "@wsecedit.dll,-59021" = "Domain member: Require strong (Windows 2000 or later) session key"
            "@wsecedit.dll,-59022" = "Interactive logon: Do not require CTRL+ALT+DEL"
            "@wsecedit.dll,-59023" = "Interactive logon: Do not display last user name"
            "@wsecedit.dll,-59028" = "Interactive logon: Message text for users attempting to log on"
            "@wsecedit.dll,-59029" = "Interactive logon: Message title for users attempting to log on"
            "@wsecedit.dll,-59030" = "Interactive logon: Number of previous logons to cache (in case domain controller is not available)"
            "@wsecedit.dll,-59031" = "Interactive logon: Prompt user to change password before expiration"
            "@wsecedit.dll,-59032" = "Interactive logon: Require Domain Controller authentication to unlock workstation"
            "@wsecedit.dll,-59034" = "Interactive logon: Smart card removal behavior"
            "@wsecedit.dll,-59155" = "Interactive logon: Machine inactivity limit"
            "@wsecedit.dll,-59039" = "Microsoft network client: Digitally sign communications (always)"
            "@wsecedit.dll,-59040" = "Microsoft network client: Digitally sign communications (if server agrees)"
            "@wsecedit.dll,-59041" = "Microsoft network client: Send unencrypted password to third-party SMB servers"
            "@wsecedit.dll,-59042" = "Microsoft network server: Amount of idle time required before suspending session"
            "@wsecedit.dll,-59043" = "Microsoft network server: Digitally sign communications (always)"
            "@wsecedit.dll,-59044" = "Microsoft network server: Digitally sign communications (if client agrees)"
            "@wsecedit.dll,-59045" = "Microsoft network server: Disconnect clients when logon hours expire"
            "@wsecedit.dll,-59142" = "Microsoft network server: Server SPN target name validation level"
            "@wsecedit.dll,-59046" = "Network access: Do not allow storage of passwords and credentials for network authentication"
            "@wsecedit.dll,-59047" = "Network access: Do not allow anonymous enumeration of SAM accounts"
            "@wsecedit.dll,-59048" = "Network access: Do not allow anonymous enumeration of SAM accounts and shares"
            "@wsecedit.dll,-59049" = "Network access: Let Everyone permissions apply to anonymous users"
            "@wsecedit.dll,-59050" = "Network access: Restrict anonymous access to Named Pipes and Shares"
            "@wsecedit.dll,-59052" = "Network access: Shares that can be accessed anonymously"
            "@wsecedit.dll,-59055" = "Network access: Sharing and security model for local accounts"
            "@wsecedit.dll,-59058" = "Network security: Do not store LAN Manager hash value on next password change"
            "@wsecedit.dll,-59059" = "Network security: LAN Manager authentication level"
            "@wsecedit.dll,-59066" = "Network security: Minimum session security for NTLM SSP based (including secure RPC) clients"
            "@wsecedit.dll,-59067" = "Network security: Minimum session security for NTLM SSP based (including secure RPC) servers"
            "@wsecedit.dll,-59072" = "Network security: LDAP client signing requirements"
            "@wsecedit.dll,-59120" = "Network security: Allow LocalSystem NULL session fallback"
            "@wsecedit.dll,-59121" = "Network security: Configure encryption types allowed for Kerberos"
            "@wsecedit.dll,-59129" = "Network security: Allow PKU2U authentication requests to this computer to use online identities."
            "@wsecedit.dll,-59133" = "Network security: Allow Local System to use computer identity for NTLM"
            "@wsecedit.dll,-59078" = "Shutdown: Allow system to be shut down without having to log on"
            "@wsecedit.dll,-59080" = "System objects: Strengthen default permissions of internal system objects (e.g. Symbolic Links)"
            "@wsecedit.dll,-59084" = "System objects: Require case insensitivity for non-Windows subsystems"
            "@scecli.dll,-8200" = "User Account Control: Behavior of the elevation prompt for administrators in Admin Approval Mode"
            "@scecli.dll,-8201" = "User Account Control: Behavior of the elevation prompt for standard users"
            "@scecli.dll,-8202" = "User Account Control: Detect application installations and prompt for elevation"
            "@scecli.dll,-8203" = "User Account Control: Run all administrators in Admin Approval Mode"
            "@scecli.dll,-8204" = "User Account Control: Virtualize file and registry write failures to per-user locations"
            "@scecli.dll,-8206" = "User Account Control: Switch to the secure desktop when prompting for elevation"
            "@scecli.dll,-8207" = "User Account Control: Admin Approval Mode for the built-in Administrator account"
            "@scecli.dll,-8208" = "User Account Control: Only elevate UIAccess applications that are installed in secure locations"
        }
        Set-Variable -Name dict_regvalue -Option ReadOnly -Value @{
            "Audit: Shut down system immediately if unable to log security audits" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Audit: Force audit policy subcategory settings (Windows Vista or later) to override audit policy category settings" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Devices: Prevent users from installing printer drivers" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Devices: Allowed to format and eject removable media" = @{'"0"' = "Administrators"; '"1"' = "Administrators and Power Users"; '"2"' = "Administrators and Interactive Users"}
            "Domain controller: Allow server operators to schedule tasks" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Domain controller: Refuse machine account password changes" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Domain controller: LDAP server signing requirements" = @{"1" = "None"; "2" = "Require signing"}
            "Domain member: Disable machine account password changes" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Domain member: Maximum machine account password age" = "days"
            "Domain member: Digitally encrypt or sign secure channel data (always)" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Domain member: Digitally encrypt secure channel data (when possible)" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Domain member: Digitally sign secure channel data (when possible)" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Domain member: Require strong (Windows 2000 or later) session key" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Interactive logon: Do not require CTRL+ALT+DEL" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Interactive logon: Do not display last user name" = @{"0" = "Disabled"; "1" = "Enabled"}
            # "Interactive logon: Message text for users attempting to log on" = @{} - Configure
            # "Interactive logon: Message title for users attempting to log on" = @{} - Configure
            "Interactive logon: Number of previous logons to cache (in case domain controller is not available)" = "number"
            "Interactive logon: Prompt user to change password before expiration" = "days"
            "Interactive logon: Require Domain Controller authentication to unlock workstation" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Interactive logon: Smart card removal behavior" = @{'"0"' = "No Action"; '"1"' = "Lock Workstation"; '"2"' = "Force Logoff"; '"3"' = "Disconnect if a remote Remote Desktop Services session"}
            "Interactive logon: Machine inactivity limit" = "seconds"
            "Microsoft network client: Digitally sign communications (always)" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Microsoft network client: Digitally sign communications (if server agrees)" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Microsoft network client: Send unencrypted password to third-party SMB servers" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Microsoft network server: Amount of idle time required before suspending session" = "minutes"
            "Microsoft network server: Digitally sign communications (always)" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Microsoft network server: Digitally sign communications (if client agrees)" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Microsoft network server: Disconnect clients when logon hours expire" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Microsoft network server: Server SPN target name validation level" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Network access: Do not allow storage of passwords and credentials for network authentication" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Network access: Do not allow anonymous enumeration of SAM accounts" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Network access: Do not allow anonymous enumeration of SAM accounts and shares" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Network access: Let Everyone permissions apply to anonymous users" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Network access: Restrict anonymous access to Named Pipes and Shares" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Network access: Shares that can be accessed anonymously" = "String"
            "Network access: Sharing and security model for local accounts" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Network security: Do not store LAN Manager hash value on next password change" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Network security: LAN Manager authentication level" = @{"0" = "Send LM & NTLM responses"; "1" = "Send LM & NTLM - use NTLMv2 session security if negotiated"; "2" = "Send NTLM response only"; "3" = "Send NTLMv2 response only"; "4" = "Send NTLMv2 response only. Refuse LM"; "5" = "Send NTLMv2 response only. Refuse LM & NTLM"}
            "Network security: Minimum session security for NTLM SSP based (including secure RPC) clients" = @{"536870912" = "Require 128-bit encryption"; "524288" = "Require NTLMv2 session security"; "537395200" = "Require NTLMv2 session security, Require 128-bit encryption"}
            "Network security: Minimum session security for NTLM SSP based (including secure RPC) servers" = @{"536870912" = "Require 128-bit encryption"; "524288" = "Require NTLMv2 session security"; "537395200" = "Require NTLMv2 session security, Require 128-bit encryption"}
            "Network security: LDAP client signing requirements" = @{"0" = "None"; "1" = "Negotiate signing"; "2" = "Require signing"}
            "Network security: Allow LocalSystem NULL session fallback" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Network security: Configure encryption types allowed for Kerberos" = @{"1" = "DES_CBC_CRC"; "2" = "DES_CBC_MD5"; "3" = "DES_CBC_CRC, DES_CBC_MD5"; "4" = "RC4_HMAC_MD5"; "5" = "DES_CBC_CRC, RC4_HMAC_MD5"; "6" = "DES_CBC_MD5, RC4_HMAC_MD5"; "7" = "DES_CBC_CRC, DES_CBC_MD5, RC4_HMAC_MD5"; "8" = "AES128_HMAC_SHA1"; "9" = "DES_CBC_CRC, AES128_HMAC_SHA1"; "10" = "DES_CBC_MD5, AES128_HMAC_SHA1"; "11" = "DES_CBC_CRC, DES_CBC_MD5, AES128_HMAC_SHA1"; "12" = "RC4_HMAC_MD5, AES128_HMAC_SHA1"; "13" = "DES_CBC_CRC, RC4_HMAC_MD5, AES128_HMAC_SHA1"; "14" = "DES_CBC_MD5, RC4_HMAC_MD5, AES128_HMAC_SHA1"; "15" = "DES_CBC_CRC, DES_CBC_MD5, RC4_HMAC_MD5, AES128_HMAC_SHA1"; "16" = "AES256_HMAC_SHA1"; "17" = "DES_CBC_CRC, AES256_HMAC_SHA1"; "18" = "DES_CBC_MD5, AES256_HMAC_SHA1"; "19" = "DES_CBC_CRC, RC4_HMAC_MD5, AES256_HMAC_SHA1"; "20" = "RC4_HMAC_MD5, AES256_HMAC_SHA1"; "21" = "DES_CBC_CRC, RC4_HMAC_MD5, AES256_HMAC_SHA1"; "22" = "DES_CBC_MD5, RC4_HMAC_MD5, AES256_HMAC_SHA1"; "23" = "DES_CBC_CRC, DES_CBC_MD5, RC4_HMAC_MD5, AES256_HMAC_SHA1"; "24" = "AES128_HMAC_SHA1, AES256_HMAC_SHA1"; "25" = "DES_CBC_CRC, AES128_HMAC_SHA1, AES256_HMAC_SHA1"; "26" = "DES_CBC_MD5, AES128_HMAC_SHA1, AES256_HMAC_SHA1"; "27" = "DES_CBC_CRC, DES_CBC_MD5, AES128_HMAC_SHA1, AES256_HMAC_SHA1"; "28" = "RC4_HMAC_MD5, AES128_HMAC_SHA1, AES256_HMAC_SHA1"; "29" = "DES_CBC_CRC, RC4_HMAC_MD5, AES128_HMAC_SHA1, AES256_HMAC_SHA1"; "30" = "DES_CBC_MD5, RC4_HMAC_MD5, AES128_HMAC_SHA1, AES256_HMAC_SHA1"; "31" = "DES_CBC_CRC, DES_CBC_MD5, RC4_HMAC_MD5, AES128_HMAC_SHA1, AES256_HMAC_SHA1"; "2147483616" = "Future encryption types"; "2147483617" = "DES_CBC_CRC, Future encryption types"; "2147483618" = "DES_CBC_MD5, Future encryption types"; "2147483619" = "DES_CBC_CRC, DES_CBC_MD5, Future encryption types"; "2147483620" = "RC4_HMAC_MD5, Future encryption types"; "2147483621" = "DES_CBC_CRC, RC4_HMAC_MD5, Future encryption types"; "2147483622" = "DES_CBC_MD5, RC4_HMAC_MD5, Future encryption types"; "2147483623" = "DES_CBC_CRC, DES_CBC_MD5, RC4_HMAC_MD5, Future encryption types"; "2147483624" = "AES128_HMAC_SHA1, Future encryption types"; "2147483625" = "DES_CBC_CRC, AES128_HMAC_SHA1, Future encryption types"; "2147483626" = "DES_CBC_MD5, AES128_HMAC_SHA1, Future encryption types"; "2147483627" = "DES_CBC_CRC, DES_CBC_MD5, AES128_HMAC_SHA1, Future encryption types"; "2147483628" = "RC4_HMAC_MD5, AES128_HMAC_SHA1, Future encryption types"; "2147483629" = "DES_CBC_CRC, RC4_HMAC_MD5, AES128_HMAC_SHA1, Future encryption types"; "2147483630" = "DES_CBC_MD5, RC4_HMAC_MD5, AES128_HMAC_SHA1, Future encryption types"; "2147483631" = "DES_CBC_CRC, RC4_HMAC_MD5, RC4_HMAC_MD5, AES128_HMAC_SHA1, Future encryption types"; "2147483632" = "AES256_HMAC_SHA1, Future encryption types"; "2147483633" = "DES_CBC_CRC, AES256_HMAC_SHA1, Future encryption types"; "2147483634" = "DES_CBC_MD5, AES256_HMAC_SHA1, Future encryption types"; "2147483635" = "DES_CBC_CRC, DES_CBC_MD5, AES256_HMAC_SHA1, Future encryption types"; "2147483636" = "RC4_HMAC_MD5, AES256_HMAC_SHA1, Future encryption types"; "2147483637" = "DES_CBC_CRC, RC4_HMAC_MD5, AES256_HMAC_SHA1, Future encryption types"; "2147483638" = "DES_CBC_MD5, RC4_HMAC_MD5, AES256_HMAC_SHA1, Future encryption types"; "2147483639" = "DES_CBC_CRC, RC4_HMAC_MD5, RC4_HMAC_MD5, AES256_HMAC_SHA1, Future encryption types"; "2147483640" = "AES128_HMAC_SHA1, AES256_HMAC_SHA1, Future encryption types"; "2147483641" = "DES_CBC_CRC, AES128_HMAC_SHA1, AES256_HMAC_SHA1, Future encryption types"; "2147483642" = "DES_CBC_MD5, AES128_HMAC_SHA1, AES256_HMAC_SHA1, Future encryption types"; "2147483643" = "DES_CBC_CRC, DES_CBC_MD5, AES128_HMAC_SHA1, AES256_HMAC_SHA1, Future encryption types"; "2147483644" = "RC4_HMAC_MD5, AES128_HMAC_SHA1, AES256_HMAC_SHA1, Future encryption types"; "2147483645" = "DES_CBC_CRC, RC4_HMAC_MD5, AES128_HMAC_SHA1, AES256_HMAC_SHA1, Future encryption types"; "2147483646" = "DES_CBC_MD5, RC4_HMAC_MD5, AES128_HMAC_SHA1, AES256_HMAC_SHA1, Future encryption types"; "2147483647" = "DES_CBC_CRC, DES_CBC_MD5, RC4_HMAC_MD5, AES128_HMAC_SHA1, AES256_HMAC_SHA1, Future encryption types"}
            "Network security: Allow PKU2U authentication requests to this computer to use online identities." = @{"0" = "Disabled"; "1" = "Enabled"}
            "Network security: Allow Local System to use computer identity for NTLM" = @{"0" = "Disabled"; "1" = "Enabled"}
            "Shutdown: Allow system to be shut down without having to log on" = @{"0" = "Disabled"; "1" = "Enabled"}
            "System objects: Strengthen default permissions of internal system objects (e.g. Symbolic Links)" = @{"0" = "Disabled"; "1" = "Enabled"}
            "System objects: Require case insensitivity for non-Windows subsystems" = @{"0" = "Disabled"; "1" = "Enabled"}
            "User Account Control: Behavior of the elevation prompt for administrators in Admin Approval Mode" = @{"0" = "Elevate without prompting"; "1" = "Prompt for credentials on the secure desktop"; "2" = "Prompt for consent on the secure desktop"; "3" = "Prompt for credentials"; "4" = "Prompt for consent"; "5" = "Prompt for consent for non-Windows binaries"}
            "User Account Control: Behavior of the elevation prompt for standard users" = @{"0" = "Automatically deny elevation requests"; "1" = "Prompt for credentials on the secure desktop"; "3" = "Prompt for credentials"}
            "User Account Control: Detect application installations and prompt for elevation" = @{"0" = "Disabled"; "1" = "Enabled"}
            "User Account Control: Run all administrators in Admin Approval Mode" = @{"0" = "Disabled"; "1" = "Enabled"}
            "User Account Control: Virtualize file and registry write failures to per-user locations" = @{"0" = "Disabled"; "1" = "Enabled"}
            "User Account Control: Switch to the secure desktop when prompting for elevation" = @{"0" = "Disabled"; "1" = "Enabled"}
            "User Account Control: Admin Approval Mode for the built-in Administrator account" = @{"0" = "Disabled"; "1" = "Enabled"}
            "User Account Control: Only elevate UIAccess applications that are installed in secure locations" = @{"0" = "Disabled"; "1" = "Enabled"}
        }

        secedit /export /quiet /areas user_rights /cfg "$($OutPath)\user_rights.ini"
        secedit /export /quiet /areas securitypolicy /cfg "$($OutPath)\securitypolicy.ini"

        $check_path_uright = Test-Path -Path "$($OutPath)\user_rights.ini"
        $check_path_secpol = Test-Path -Path "$($OutPath)\securitypolicy.ini"

        Write-Host "Getting Security Options..." *>&1

        if ($check_path_uright -eq $False)
        {
            Write-Host "Parse $($OutPath)\user_rights.ini failed." *>&1
            exit
        }
        if ($check_path_secpol -eq $False)
        {
            Write-Host "Parse $($OutPath)\securitypolicy.ini failed." *>&1
            exit
        }

        # Modify SID to Display Value and Fullname
        $user_rights = Get-IniContent -FilePath "$($OutPath)\user_rights.ini"
        $keys = $user_rights["Privilege Rights"].Keys | ForEach-Object -Process {$_.toString()}
        $usrrights = 1 | Select-Object -Property Name, Value
        $usrrights.Name = @()
        $usrrights.Value = @()
        foreach ($key in $keys)
        {
            $usrrights.Name += $dict_ura_name.$key
            $tmp = $user_rights["Privilege Rights"][$key]
            foreach ($sid in $user_rights["Privilege Rights"][$key].Split(","))
            {
                $sid = $sid.replace(" ","")
                $tmp = $tmp.replace($sid,$dict_sid.($sid))
            }
            $usrrights.Value += $tmp
        }
        #Export User Rights Assignment to Json
        $usrrights | ConvertTo-Json | Out-File -FilePath "$($OutPath)\user_rights.json"

        # Modify Registry to Display Name and Value
        $secpol = Get-IniContent -FilePath "$($OutPath)\securitypolicy.ini"
        $keys = $secpol["Registry Values"].Keys | ForEach-Object -Process {$_.toString()}
        #Var store result
        $secopt = 1 | Select-Object -Property Name, Value
        $secopt.Name = @()
        $secopt.Value = @()

        Write-Host "Parsing Security Options to JSON Format." *>&1

        foreach($key in $keys)
        {
            $name = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SecEdit\Reg Values\$($key.Replace("\","/"))").DisplayName
            $value = ($secpol["Registry Values"].$key).Substring(2)
            if ($null -ne $dict_regname.$name)
            {
                $secopt.Name += $dict_regname.$name
                $secopt.Value += $secpol["Registry Values"][$key]
                if ($null -ne $dict_regvalue.($dict_regname.$name))
                {
                    switch (($secpol["Registry Values"][$key]).Split(",")[0])
                    {
                        "1" {
                                switch ($dict_regvalue.($dict_regname.$name))
                                {
                                    "number" {
                                                $value = 0 + $value.Replace('"',"")
                                                $secopt.Value += $value
                                                break
                                            }
                                    "days" {
                                                $secopt.Value += New-TimeSpan -Days $value
                                                break
                                            }
                                    "minutes"{
                                                $secopt.Value += New-TimeSpan -Minutes $value
                                                break
                                            }
                                    "seconds"{
                                                $secopt.Value += New-TimeSpan -Seconds $value
                                                break
                                            }
                                    default {
                                                $secopt.Value += if ($null -ne $dict_regvalue.($dict_regname.$name).$value) {$dict_regvalue.($dict_regname.$name).$value} else {$secpol["Registry Values"][$key]}
                                                break
                                            }
                                }
                                break
                            }
                        "4" {
                                switch ($dict_regvalue.($dict_regname.$name))
                                {
                                    "number" {
                                                $value = 0 + $value.Replace('"',"")
                                                $secopt.Value += $value
                                                break
                                            }
                                    "days" {
                                                $secopt.Value += New-TimeSpan -Days $value
                                                break
                                            }
                                    "minutes"{
                                                $secopt.Value += New-TimeSpan -Minutes $value
                                                break
                                            }
                                    "seconds"{
                                                $secopt.Value += New-TimeSpan -Seconds $value
                                                break
                                            }
                                    default {
                                                $secopt.Value += if ($null -ne $dict_regvalue.($dict_regname.$name).$value) {$dict_regvalue.($dict_regname.$name).$value} else {$secpol["Registry Values"][$key]}
                                                break
                                            }
                                }
                                break
                            }    
                        "7" {
                                $secopt.Value += $value
                                break
                            }
                    }
                }
                else 
                {
                    $secopt.Value += $secpol["Registry Values"][$key]
                }
            }
        }
        #Export Security Options to Json
        $secopt | ConvertTo-Json | Out-File -FilePath "$($OutPath)\securityoptions.json"
        Write-Host "Parse Security Options successfully." *>&1

        Write-Host "Getting AD Account Policy..." *>&1
        try
        {
            $acc_policy = Get-ADDefaultDomainPasswordPolicy -Server $domain | Select-Object PasswordHistoryCount, MaxPasswordAge, MinPasswordAge, MinPasswordLength, ComplexityEnabled, ReversibleEncryptionEnabled, LockoutDuration, LockoutThreshold, LockoutObservationWindow
        }
        catch [System.Management.Automation.CommandNotFoundException]
        {
            Write-Host "Module ActiveDirectory is not found." *>&1
            Write-Host "Account Policy will be empty." *>&1
        }
        catch [System.Exception]
        {
            Write-Host "An error occurred that could not be resolved." *>&1
        }
        finally
        {
            $acc_policy | Export-Clixml -Path "$($OutPath)\accountpolicy.xml"
        }
        Write-Host "Get GPO is done." *>&1
    }

    Get-GPOInfo -OutPath $InPath

    $check_path_accpol = Test-Path -Path "$($InPath)/accountpolicy.xml"
    $check_path_secpol = Test-Path -Path "$($InPath)/securityoptions.json"
    if ($check_path_accpol -eq $false)
    {
        Write-Host "$($InPath)/accountpolicy.xml could be not found." *>&1
        exit
    }
    if ($check_path_secpol -eq $false)
    {
        Write-Host "$($InPath)/securityoptions.json could be not found." *>&1
        exit
    }

    Set-Variable -Name dict_acc_policy -Option ReadOnly -Value (Select-Object @{n='Name';e={'PasswordHistoryCount',
                                                                                            'MaxPasswordAge',
                                                                                            'MinPasswordAge',
                                                                                            'MinPasswordLength',
                                                                                            'ComplexityEnabled',
                                                                                            'ReversibleEncryptionEnabled',
                                                                                            'LockoutDuration',
                                                                                            'LockoutThreshold',
                                                                                            'LockoutObservationWindow'}},
                                                                              @{n='Value';e={24,
                                                                                             (New-TimeSpan -Days 60),
                                                                                             (New-TimeSpan -Days 1),
                                                                                             14,
                                                                                             $true,
                                                                                             $false,
                                                                                             (New-TimeSpan -Minutes 15),
                                                                                             10,
                                                                                             (New-TimeSpan -Minutes 15)}} -InputObject '')

    Set-Variable -Name dict_security_options -Option ReadOnly -Value (Select-Object @{n='Name';e={
                                                                                                    "Audit: Force audit policy subcategory settings (Windows Vista or later) to override audit policy category settings",
                                                                                                    "Audit: Shut down system immediately if unable to log security audits",
                                                                                                    "Devices: Allowed to format and eject removable media",
                                                                                                    "Devices: Prevent users from installing printer drivers when connecting to shared printers",
                                                                                                    "Domain controller: Allow server operators to schedule tasks",
                                                                                                    "Domain controller: LDAP server signing requirements",
                                                                                                    "Domain controller: Refuse machine account password changes",
                                                                                                    "Domain member: Digitally encrypt or sign secure channel data (always)",
                                                                                                    "Domain member: Digitally encrypt secure channel data (when possible)",
                                                                                                    "Domain member: Digitally sign secure channel data (when possible)",
                                                                                                    "Domain member: Disable machine account password changes",
                                                                                                    "Domain member: Maximum machine account password age",
                                                                                                    "Domain member: Require strong (Windows 2000 or later) session key",
                                                                                                    "Interactive logon: Do not display last user name",
                                                                                                    "Interactive logon: Do not require CTRL+ALT+DEL",
                                                                                                    "Interactive logon: Machine inactivity limit",
                                                                                                    "Interactive logon: Number of previous logons to cache (in case domain controller is not available)",
                                                                                                    "Interactive logon: Prompt user to change password before expiration",
                                                                                                    "Interactive logon: Require Domain Controller authentication to unlock workstation",
                                                                                                    "Interactive logon: Smart card removal behavior",
                                                                                                    "Microsoft network client: Digitally sign communications (always)",
                                                                                                    "Microsoft network client: Digitally sign communications (if server agrees)",
                                                                                                    "Microsoft network client: Send unencrypted password to third-party SMB servers",
                                                                                                    "Microsoft network server: Amount of idle time required before suspending session",
                                                                                                    "Microsoft network server: Digitally sign communications (always)",
                                                                                                    "Microsoft network server: Digitally sign communications (if client agrees)",
                                                                                                    "Microsoft network server: Disconnect clients when logon hours expire",
                                                                                                    "Microsoft network server: Server SPN target name validation level",
                                                                                                    "Network access: Allow anonymous SID/Name translation",
                                                                                                    "Network access: Do not allow anonymous enumeration of SAM accounts",
                                                                                                    "Network access: Do not allow anonymous enumeration of SAM accounts and shares",
                                                                                                    "Network access: Do not allow storage of passwords and credentials for network authentication",
                                                                                                    "Network access: Let Everyone permissions apply to anonymous users",
                                                                                                    "Network access: Restrict anonymous access to Named Pipes and Shares",
                                                                                                    "Network access: Shares that can be accessed anonymously",
                                                                                                    "Network access: Sharing and security model for local accounts",
                                                                                                    "Network security: Allow Local System to use computer identity for NTLM",
                                                                                                    "Network security: Allow LocalSystem NULL session fallback",
                                                                                                    "Network security: Allow PKU2U authentication requests to this computer to use online identities.",
                                                                                                    "Network security: Configure encryption types allowed for Kerberos",
                                                                                                    "Network security: Do not store LAN Manager hash value on next password change",
                                                                                                    "Network security: Force logoff when logon hours expire",
                                                                                                    "Network security: LAN Manager authentication level",
                                                                                                    "Network security: LDAP client signing requirements",
                                                                                                    "Network security: Minimum session security for NTLM SSP based (including secure RPC) clients",
                                                                                                    "Network security: Minimum session security for NTLM SSP based (including secure RPC) servers",
                                                                                                    "Shutdown: Allow system to be shut down without having to log on",
                                                                                                    "System objects: Require case insensitivity for non-Windows subsystems",
                                                                                                    "System objects: Strengthen default permissions of internal system objects (e.g. Symbolic Links)",
                                                                                                    "User Account Control: Admin Approval Mode for the built-in Administrator account",
                                                                                                    "User Account Control: Behavior of the elevation prompt for administrators in Admin Approval Mode",
                                                                                                    "User Account Control: Behavior of the elevation prompt for standard users",
                                                                                                    "User Account Control: Detect application installations and prompt for elevation",
                                                                                                    "User Account Control: Only elevate UIAccess applications that are installed in secure locations"
                                                                                                    "User Account Control: Run all administrators in Admin Approval Mode",
                                                                                                    "User Account Control: Switch to the secure desktop when prompting for elevation",
                                                                                                    "User Account Control: Virtualize file and registry write failures to per-user locations"
                                                                                                }},
                                                                                   @{n='Value';e={
                                                                                                  'Enabled',
                                                                                                  'Disabled',
                                                                                                  'Administrators',
                                                                                                  'Enabled',
                                                                                                  'Disabled',
                                                                                                  'Require signing',
                                                                                                  'Disabled',
                                                                                                  'Enabled',
                                                                                                  'Enabled',
                                                                                                  'Enabled',
                                                                                                  'Disabled',
                                                                                                  @(0,30),
                                                                                                  'Enabled',
                                                                                                  'Enabled',
                                                                                                  'Disabled',
                                                                                                  @(0,900),
                                                                                                  @(-1,4),
                                                                                                  @(5,14),
                                                                                                  'Enabled',
                                                                                                  @('Lock Workstation','Force Logoff'),
                                                                                                  'Enabled',
                                                                                                  'Enabled',
                                                                                                  'Disabled',
                                                                                                  @(0,15),
                                                                                                  'Enabled',
                                                                                                  'Enabled',
                                                                                                  'Enabled',
                                                                                                  @('Accept if provided by client','Required from client'),
                                                                                                  'Disabled',
                                                                                                  'Enabled',
                                                                                                  'Enabled',
                                                                                                  'Enabled',
                                                                                                  'Disabled',
                                                                                                  'Enabled',
                                                                                                  'None',
                                                                                                  'Classic - local users authenticate as themselves',
                                                                                                  'Enabled',
                                                                                                  'Disabled',
                                                                                                  'Disabled',
                                                                                                  'AES128_HMAC_SHA1,AES256_HMAC_SHA1,Future encryption types',
                                                                                                  'Enabled',
                                                                                                  'Enabled',
                                                                                                  'Send NTLMv2 responses only. Refuse LM & NTLM',
                                                                                                  @('Negotiate signing','Require signing'),
                                                                                                  'Require NTLMv2 session security, Require 128-bit encryption',
                                                                                                  'Require NTLMv2 session security, Require 128-bit encryption',
                                                                                                  'Disabled',
                                                                                                  'Enabled',
                                                                                                  'Enabled',
                                                                                                  'Enabled',
                                                                                                  'Prompt for consent on the secure desktop',
                                                                                                  'Automatically deny elevation requests',
                                                                                                  'Enabled',
                                                                                                  'Enabled',
                                                                                                  'Enabled',
                                                                                                  'Enabled',
                                                                                                  'Enabled'}} -InputObject '')

    $accpolicy = Import-Clixml -Path "$($InPath)/accountpolicy.xml"
    $secopt = Get-Content -Path "$($InPath)/securityoptions.json" | Out-String | ConvertFrom-Json

    $report = @()
    foreach ($name in $dict_acc_policy.Name)
    {
        $report += [pscustomobject]@{Name=$name;CurrentValue='';State=$false;Score=0}
    }
    foreach ($name in $dict_security_options.Name)
    {
        $report += [pscustomobject]@{Name=$name;CurrentValue='';State=$false;Score=0}
    }
    
    $report[0].Score = if ($accpolicy.($dict_acc_policy.Name[0]) -ge $dict_acc_policy.Value[0]) {1} else {0}
    $report[0].CurrentValue = $accpolicy.($dict_acc_policy.Name[0])
    $report[1].Score = if (($accpolicy.($dict_acc_policy.Name[1]) -le $dict_acc_policy.Value[1]) -and ($accpolicy.($dict_acc_policy.Name[1]) -ne 0)) {1} else {0}
    $report[1].CurrentValue = $accpolicy.($dict_acc_policy.Name[1])
    $report[2].Score = if ($accpolicy.($dict_acc_policy.Name[2]) -ge $dict_acc_policy.Value[2]) {1} else {0}
    $report[2].CurrentValue = $accpolicy.($dict_acc_policy.Name[2])
    $report[3].Score = if ($accpolicy.($dict_acc_policy.Name[3]) -ge $dict_acc_policy.Value[3]) {1} else {0}
    $report[3].CurrentValue = $accpolicy.($dict_acc_policy.Name[3])
    $report[4].Score = if ($accpolicy.($dict_acc_policy.Name[4]) -eq $dict_acc_policy.Value[4]) {1} else {0}
    $report[4].CurrentValue = $accpolicy.($dict_acc_policy.Name[4])
    $report[5].Score = if ($accpolicy.($dict_acc_policy.Name[5]) -eq $dict_acc_policy.Value[5]) {1} else {0}
    $report[5].CurrentValue = $accpolicy.($dict_acc_policy.Name[5])
    $report[6].Score = if ($accpolicy.($dict_acc_policy.Name[6]) -ge $dict_acc_policy.Value[6]) {1} else {0}
    $report[6].CurrentValue = $accpolicy.($dict_acc_policy.Name[6])
    $report[7].Score = if (($accpolicy.($dict_acc_policy.Name[7]) -le $dict_acc_policy.Value[7]) -and ($accpolicy.($dict_acc_policy.Name[7]) -ne 0)) {1} else {0}
    $report[7].CurrentValue = $accpolicy.($dict_acc_policy.Name[7])
    $report[8].Score = if ($accpolicy.($dict_acc_policy.Name[8]) -ge $dict_acc_policy.Value[8]) {1} else {0}
    $report[8].CurrentValue = $accpolicy.($dict_acc_policy.Name[8])
    
    for ($i = 9; $i -lt $report.Count; $i++)
    {
        $j = [array]::IndexOf($secopt.Name, $report[$i].Name)
        if ($j -ge 0)
        {
            $report[$i].CurrentValue = $secopt.Value[$j]
            if ($dict_security_options.Value[$i - 9].GetType().BaseType.Name -eq "Array")
            {
                if ($dict_security_options.Value[$i - 9][0].GetType().Name -eq "String")
                {
                    if ($secopt.Value[$j] -in $dict_security_options.Value[$i - 9])
                    {
                        $report[$i].Score += 1
                    }
                }
                else
                {
                    if ($secopt.Value[$j] -gt $dict_security_options.Value[$i - 9][0] -and $secopt.Value[$j] -le $dict_security_options.Value[$i - 9][1])
                    {
                        $report[$i].Score += 1
                    }
                }
            }
            else
            {
                if ($dict_security_options.Value[$i - 9] -eq $secopt.Value[$j])
                {
                    $report[$i].Score += 1
                }
            }
        }
    }

    foreach ($policy in $report)
    {
        if ($policy.Score -eq 1)
        {
            $policy.State = $true
        }
        
        if ($policy.CurrentValue -eq "")
        {
            $policy.CurrentValue = "Not Define"
        }
    }

    $report | ConvertTo-Json | Out-File -FilePath "$($DestPath)\$($ip)_GPO.json"
    Transfer-Session -HostName $FTPHOST -FilePath "$($DestPath)\$($ip)_GPO.json" -Option UploadFile 
}

Check-GPO -OutPath "C:\Windows\Temp" -InPath "C:\Windows\Temp" -DestPath $CURPATH

